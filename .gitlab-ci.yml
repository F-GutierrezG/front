image: alpine

variables:
  COMMIT: ${CI_COMMIT_SHA}
  TAG: ${CI_COMMIT_REF_NAME}
  REGISTRY_REPO: registry.gitlab.com/gusisoft/onelike/client/front
  FRONT: client-front

stages:
  - test
  - build
  - registry
  - cleanup
  - deploy

Tests:
  stage: test
  only:
    - devel
  script:
    - docker-compose -f docker-compose-dev.yml build --no-cache
    - docker-compose -f docker-compose-dev.yml up -d
    - docker-compose -f docker-compose-dev.yml down

Build:
  stage: build
  only:
    - stage
  script:
    - docker-compose -f docker-compose-prod.yml build --no-cache
    - docker-compose -f docker-compose-prod.yml down

Front:
  stage: registry
  only:
    - stage
  before_script:
    - export COMMIT_TIME=$(git show -s --format=%ct $CI_COMMIT_SHA)
    - export TAG=${CI_COMMIT_REF_NAME}_$COMMIT_TIME
    - docker login -u gitlab-ci-token -p $DOCKER_TOKEN registry.gitlab.com
    - export MAIN_REPO="https://${GITLAB_USER}:${GITLAB_PASSWORD}@gitlab.com/gusisoft/OneLike/client/front.git"
    - export FRONT_REPO="${MAIN_REPO}#${CI_COMMIT_REF_NAME}"
  script:
    - docker build $FRONT_REPO -t $FRONT:$COMMIT -f Dockerfile-prod
    - docker tag $FRONT:$COMMIT $REGISTRY_REPO/$FRONT:$TAG
    - docker push $REGISTRY_REPO/$FRONT:$TAG

Cleaning:
  stage: cleanup
  only:
    - stage
  script:
    - docker image rm -f $(docker image ls -q)
    - docker volume rm -f $(docker volume ls -q)

Stage:
  stage: deploy
  environment:
    name: stage
    url: http://stage.onelike.gusisoft.cl
  only:
    - stage
  before_script:
    - export COMMIT_TIME=$(git show -s --format=%ct $CI_COMMIT_SHA)
    - export TAG=${CI_COMMIT_REF_NAME}_$COMMIT_TIME
    - rm -rf ~/.ssh
    - mkdir -p ~/.ssh
    - echo -e "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
  script:
    - bash ./stage-deploy.sh
